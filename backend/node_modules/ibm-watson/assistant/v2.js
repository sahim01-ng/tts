"use strict";
/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.96.1-5136e54a-20241108-203028
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * The IBM&reg; watsonx&trade; Assistant service combines machine learning, natural language understanding, and an
 * integrated dialog editor to create conversation flows between your apps and your users.
 *
 * The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and
 * receive a response.
 *
 * You need a paid Plus plan or higher to use the watsonx Assistant v2 API.
 *
 * API Version: 2.0
 * See: https://cloud.ibm.com/docs/assistant
 */
var AssistantV2 = /** @class */ (function (_super) {
    __extends(AssistantV2, _super);
    /**
     * Construct a AssistantV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the API version you want to use. Specify dates in YYYY-MM-DD
     * format. The current version is `2023-06-15`.
     * @param {string} [options.serviceUrl] - The base URL for the service
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {AssistantV2}
     */
    function AssistantV2(options) {
        var _this = this;
        options = options || {};
        var _requiredParams = ['version'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(options, _requiredParams, null);
        if (_validationErrors) {
            throw _validationErrors;
        }
        if (!options.serviceName) {
            options.serviceName = AssistantV2.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * conversationalSkillProviders
     ************************/
    /**
     * Create a conversational skill provider.
     *
     * Create a new conversational skill provider.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.providerId - The unique identifier of the provider.
     * @param {ProviderSpecification} params.specification - The specification of the provider.
     * @param {ProviderPrivate} params._private - Private information of the provider.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.ProviderResponse>>}
     */
    AssistantV2.prototype.createProvider = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['providerId', 'specification', '_private'];
        var _validParams = ['providerId', 'specification', '_private', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'provider_id': _params.providerId,
            'specification': _params.specification,
            'private': _params._private,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createProvider');
        var parameters = {
            options: {
                url: '/v2/providers',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List conversational skill providers.
     *
     * List the conversational skill providers associated with a Watson Assistant service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned conversational skill providers will be sorted. To
     * reverse the sort order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.ProviderCollection>>}
     */
    AssistantV2.prototype.listProviders = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['pageLimit', 'includeCount', 'sort', 'cursor', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listProviders');
        var parameters = {
            options: {
                url: '/v2/providers',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a conversational skill provider.
     *
     * Update a new conversational skill provider.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.providerId - Unique identifier of the conversational skill provider.
     * @param {ProviderSpecification} params.specification - The specification of the provider.
     * @param {ProviderPrivate} params._private - Private information of the provider.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.ProviderResponse>>}
     */
    AssistantV2.prototype.updateProvider = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['providerId', 'specification', '_private'];
        var _validParams = ['providerId', 'specification', '_private', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'specification': _params.specification,
            'private': _params._private,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'provider_id': _params.providerId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'updateProvider');
        var parameters = {
            options: {
                url: '/v2/providers/{provider_id}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * assistants
     ************************/
    /**
     * Create an assistant.
     *
     * Create a new assistant.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.language] - The language of the assistant.
     * @param {string} [params.name] - The name of the assistant. This string cannot contain carriage return, newline, or
     * tab characters.
     * @param {string} [params.description] - The description of the assistant. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.AssistantData>>}
     */
    AssistantV2.prototype.createAssistant = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['language', 'name', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'language': _params.language,
            'name': _params.name,
            'description': _params.description,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createAssistant');
        var parameters = {
            options: {
                url: '/v2/assistants',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List assistants.
     *
     * List the assistants associated with a watsonx Assistant service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned assistants will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.AssistantCollection>>}
     */
    AssistantV2.prototype.listAssistants = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['pageLimit', 'includeCount', 'sort', 'cursor', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listAssistants');
        var parameters = {
            options: {
                url: '/v2/assistants',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete assistant.
     *
     * Delete an assistant.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.EmptyObject>>}
     */
    AssistantV2.prototype.deleteAssistant = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteAssistant');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * sessions
     ************************/
    /**
     * Create a session.
     *
     * Create a new session. A session is used to send user input to a skill and receive responses. It also maintains the
     * state of the conversation. A session persists until it is deleted, or until it times out because of inactivity.
     * (For more information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings).).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {RequestAnalytics} [params.analytics] - An optional object containing analytics data. Currently, this data
     * is used only for events sent to the Segment extension.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.SessionResponse>>}
     */
    AssistantV2.prototype.createSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'analytics', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'analytics': _params.analytics,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createSession');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/sessions',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete session.
     *
     * Deletes a session explicitly before it times out. (For more information about the session inactivity timeout, see
     * the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings)).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.EmptyObject>>}
     */
    AssistantV2.prototype.deleteSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'sessionId'];
        var _validParams = ['assistantId', 'sessionId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteSession');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/sessions/{session_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * message
     ************************/
    /**
     * Send user input to assistant (stateful).
     *
     * Send user input to an assistant and receive a response, with conversation state (including context data) stored by
     * watsonx Assistant for the duration of the session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {MessageContext} [params.context] - Context data for the conversation. You can use this property to set or
     * modify context variables, which can also be accessed by dialog nodes. The context is stored by the assistant on a
     * per-session basis.
     *
     * **Note:** The total size of the context data stored for a stateful session cannot exceed 100KB.
     * @param {string} [params.userId] - A string value that identifies the user who is interacting with the assistant.
     * The client must provide a unique identifier for each individual end user who accesses the application. For
     * user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain
     * carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically
     * set to the value of **context.global.session_id**.
     *
     * **Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is
     * specified in both locations, the value specified at the root is used.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.StatefulMessageResponse>>}
     */
    AssistantV2.prototype.message = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId', 'sessionId'];
        var _validParams = ['assistantId', 'environmentId', 'sessionId', 'input', 'context', 'userId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'context': _params.context,
            'user_id': _params.userId,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'message');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/sessions/{session_id}/message',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Send user input to assistant (stateless).
     *
     * Send user input to an assistant and receive a response, with conversation state (including context data) managed by
     * your application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {StatelessMessageInput} [params.input] - An input object that includes the input text.
     * @param {StatelessMessageContext} [params.context] - Context data for the conversation. You can use this property to
     * set or modify context variables, which can also be accessed by dialog nodes. The context is not stored by the
     * assistant. To maintain session state, include the context from the previous response.
     *
     * **Note:** The total size of the context data for a stateless session cannot exceed 250KB.
     * @param {string} [params.userId] - A string value that identifies the user who is interacting with the assistant.
     * The client must provide a unique identifier for each individual end user who accesses the application. For
     * user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain
     * carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically
     * set to the value of **context.global.session_id**.
     *
     * **Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is
     * specified in both locations in a message request, the value specified at the root is used.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.StatelessMessageResponse>>}
     */
    AssistantV2.prototype.messageStateless = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId'];
        var _validParams = ['assistantId', 'environmentId', 'input', 'context', 'userId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'context': _params.context,
            'user_id': _params.userId,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'messageStateless');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/message',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * messageStream
     ************************/
    /**
     * Send user input to assistant (stateful).
     *
     * Send user input to an assistant and receive a streamed response, with conversation state (including context data)
     * stored by watsonx Assistant for the duration of the session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {MessageContext} [params.context] - Context data for the conversation. You can use this property to set or
     * modify context variables, which can also be accessed by dialog nodes. The context is stored by the assistant on a
     * per-session basis.
     *
     * **Note:** The total size of the context data stored for a stateful session cannot exceed 100KB.
     * @param {string} [params.userId] - A string value that identifies the user who is interacting with the assistant.
     * The client must provide a unique identifier for each individual end user who accesses the application. For
     * user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain
     * carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically
     * set to the value of **context.global.session_id**.
     *
     * **Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is
     * specified in both locations, the value specified at the root is used.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<NodeJS.ReadableStream>>}
     */
    AssistantV2.prototype.messageStream = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId', 'sessionId'];
        var _validParams = ['assistantId', 'environmentId', 'sessionId', 'input', 'context', 'userId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'context': _params.context,
            'user_id': _params.userId,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'messageStream');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/environments/{environment_id}/sessions/{session_id}/message_stream',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'text/event-stream',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Send user input to assistant (stateless).
     *
     * Send user input to an assistant and receive a response, with conversation state (including context data) managed by
     * your application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {MessageContext} [params.context] - Context data for the conversation. You can use this property to set or
     * modify context variables, which can also be accessed by dialog nodes. The context is stored by the assistant on a
     * per-session basis.
     *
     * **Note:** The total size of the context data stored for a stateful session cannot exceed 100KB.
     * @param {string} [params.userId] - A string value that identifies the user who is interacting with the assistant.
     * The client must provide a unique identifier for each individual end user who accesses the application. For
     * user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain
     * carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically
     * set to the value of **context.global.session_id**.
     *
     * **Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is
     * specified in both locations, the value specified at the root is used.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<NodeJS.ReadableStream>>}
     */
    AssistantV2.prototype.messageStreamStateless = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId'];
        var _validParams = ['assistantId', 'environmentId', 'input', 'context', 'userId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'context': _params.context,
            'user_id': _params.userId,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'messageStreamStateless');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/environments/{environment_id}/message_stream',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'text/event-stream',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * bulkClassify
     ************************/
    /**
     * Identify intents and entities in multiple user utterances.
     *
     * Send multiple user inputs to a dialog skill in a single request and receive information about the intents and
     * entities recognized in each input. This method is useful for testing and comparing the performance of different
     * skills or skill versions.
     *
     * This method is available only with Enterprise with Data Isolation plans.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.skillId - Unique identifier of the skill. To find the skill ID in the watsonx Assistant user
     * interface, open the skill settings and click **API Details**.
     * @param {BulkClassifyUtterance[]} params.input - An array of input utterances to classify.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.BulkClassifyResponse>>}
     */
    AssistantV2.prototype.bulkClassify = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['skillId', 'input'];
        var _validParams = ['skillId', 'input', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'skill_id': _params.skillId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'bulkClassify');
        var parameters = {
            options: {
                url: '/v2/skills/{skill_id}/workspace/bulk_classify',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * logs
     ************************/
    /**
     * List log events for an assistant.
     *
     * List the events from the log of an assistant.
     *
     * This method requires Manager access.
     *
     * **Note:** If you use the **cursor** parameter to retrieve results one page at a time, subsequent requests must be
     * no more than 5 minutes apart. Any returned value for the **cursor** parameter becomes invalid after 5 minutes. For
     * more information about using pagination, see [Pagination](#pagination).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} [params.sort] - How to sort the returned log events. You can sort by **request_timestamp**. To
     * reverse the sort order, prefix the parameter value with a minus sign (`-`).
     * @param {string} [params.filter] - A cacheable parameter that limits the results to those matching the specified
     * filter. For more information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     *
     * **Note:** If the API is not returning your data, try lowering the page_limit value.
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.LogCollection>>}
     */
    AssistantV2.prototype.listLogs = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'sort', 'filter', 'pageLimit', 'cursor', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'sort': _params.sort,
            'filter': _params.filter,
            'page_limit': _params.pageLimit,
            'cursor': _params.cursor,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listLogs');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/logs',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).
     *
     * **Note:** This operation is intended only for deleting data associated with a single specific customer, not for
     * deleting data associated with multiple customers or for any other purpose. For more information, see [Labeling and
     * deleting data in watsonx
     * Assistant](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security-gdpr-wa).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.EmptyObject>>}
     */
    AssistantV2.prototype.deleteUserData = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['customerId'];
        var _validParams = ['customerId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'customer_id': _params.customerId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteUserData');
        var parameters = {
            options: {
                url: '/v2/user_data',
                method: 'DELETE',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * environments
     ************************/
    /**
     * List environments.
     *
     * List the environments associated with an assistant.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned environments will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.EnvironmentCollection>>}
     */
    AssistantV2.prototype.listEnvironments = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'pageLimit', 'includeCount', 'sort', 'cursor', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listEnvironments');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/environments',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get environment.
     *
     * Get information about an environment. For more information about environments, see
     * [Environments](https://cloud.ibm.com/docs/watson-assistant?topic=watson-assistant-publish-overview#environments).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Environment>>}
     */
    AssistantV2.prototype.getEnvironment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId'];
        var _validParams = ['assistantId', 'environmentId', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'getEnvironment');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/environments/{environment_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update environment.
     *
     * Update an environment with new or modified data. For more information about environments, see
     * [Environments](https://cloud.ibm.com/docs/watson-assistant?topic=watson-assistant-publish-overview#environments).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.environmentId - Unique identifier of the environment. To find the environment ID in the
     * watsonx Assistant user interface, open the environment settings and click **API Details**. **Note:** Currently, the
     * API does not support creating environments.
     * @param {string} [params.name] - The name of the environment.
     * @param {string} [params.description] - The description of the environment.
     * @param {UpdateEnvironmentOrchestration} [params.orchestration] - The search skill orchestration settings for the
     * environment.
     * @param {number} [params.sessionTimeout] - The session inactivity timeout setting for the environment (in seconds).
     * @param {EnvironmentSkill[]} [params.skillReferences] - An array of objects identifying the skills (such as action
     * and dialog) that exist in the environment.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Environment>>}
     */
    AssistantV2.prototype.updateEnvironment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'environmentId'];
        var _validParams = ['assistantId', 'environmentId', 'name', 'description', 'orchestration', 'sessionTimeout', 'skillReferences', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'orchestration': _params.orchestration,
            'session_timeout': _params.sessionTimeout,
            'skill_references': _params.skillReferences,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'environment_id': _params.environmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'updateEnvironment');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/environments/{environment_id}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * releases
     ************************/
    /**
     * Create release.
     *
     * Create a new release using the current content of the dialog and action skills in the draft environment. (In the
     * watsonx Assistant user interface, a release is called a *version*.).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} [params.description] - The description of the release.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Release>>}
     */
    AssistantV2.prototype.createRelease = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'description': _params.description,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createRelease');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List releases.
     *
     * List the releases associated with an assistant. (In the watsonx Assistant user interface, a release is called a
     * *version*.).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned workspaces will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.ReleaseCollection>>}
     */
    AssistantV2.prototype.listReleases = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'pageLimit', 'includeCount', 'sort', 'cursor', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listReleases');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get release.
     *
     * Get information about a release.
     *
     * Release data is not available until publishing of the release completes. If publishing is still in progress, you
     * can continue to poll by calling the same request again and checking the value of the **status** property. When
     * processing has completed, the request returns the release data.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Release>>}
     */
    AssistantV2.prototype.getRelease = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release'];
        var _validParams = ['assistantId', 'release', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'getRelease');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete release.
     *
     * Delete a release. (In the watsonx Assistant user interface, a release is called a *version*.).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.EmptyObject>>}
     */
    AssistantV2.prototype.deleteRelease = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release'];
        var _validParams = ['assistantId', 'release', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteRelease');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deploy release.
     *
     * Update the environment with the content of the release. All snapshots saved as part of the release become active in
     * the environment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {string} params.environmentId - The environment ID of the environment where the release is to be deployed.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Environment>>}
     */
    AssistantV2.prototype.deployRelease = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release', 'environmentId'];
        var _validParams = ['assistantId', 'release', 'environmentId', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'environment_id': _params.environmentId,
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deployRelease');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}/deploy',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create release export.
     *
     * Initiate an asynchronous process which will create a downloadable Zip file artifact (/package) for an assistant
     * release. This artifact will contain Action and/or Dialog skills that are part of the release. The Dialog skill will
     * only be included in the event that coexistence is enabled on the assistant. The expected workflow with the use of
     * Release Export endpoint is to first initiate the creation of the artifact with the POST endpoint and then poll the
     * GET endpoint to retrieve the artifact. Once the artifact has been created, it will last for the duration (/scope)
     * of the release.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.CreateReleaseExportWithStatusErrors>>}
     */
    AssistantV2.prototype.createReleaseExport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release'];
        var _validParams = ['assistantId', 'release', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createReleaseExport');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}/export',
                method: 'POST',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get release export.
     *
     * A dual function endpoint to either retrieve the Zip file artifact that is associated with an assistant release or,
     * retrieve the status of the artifact's creation. It is assumed that the artifact creation was already initiated
     * prior to calling this endpoint. In the event that the artifact is not yet created and ready for download, this
     * endpoint can be used to poll the system until the creation is completed or has failed. On the other hand, if the
     * artifact is created, this endpoint will return the Zip file artifact as an octet stream. Once the artifact has been
     * created, it will last for the duration (/scope) of the release. <br /><br /> When you will have downloaded the Zip
     * file artifact, you have one of three ways to import it into an assistant's draft environment. These are as follows.
     * <br /><ol><li>Import the zip package in Tooling via <var>"Assistant Settings" -> "Download/Upload files" ->
     * "Upload" -> "Assistant only"</var>.</li><li>Import the zip package via "Create release import" endpoint using the
     * APIs.</li><li>Extract the contents of the Zip file artifact and individually import the skill JSONs via skill
     * update endpoints.</li></ol>.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.CreateReleaseExportWithStatusErrors>>}
     */
    AssistantV2.prototype.downloadReleaseExport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release'];
        var _validParams = ['assistantId', 'release', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'downloadReleaseExport');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}/export',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get release export as stream.
     *
     * A dual function endpoint to either retrieve the Zip file artifact that is associated with an assistant release or,
     * retrieve the status of the artifact's creation. It is assumed that the artifact creation was already initiated
     * prior to calling this endpoint. In the event that the artifact is not yet created and ready for download, this
     * endpoint can be used to poll the system until the creation is completed or has failed. On the other hand, if the
     * artifact is created, this endpoint will return the Zip file artifact as an octet stream. Once the artifact has been
     * created, it will last for the duration (/scope) of the release. <br /><br /> When you will have downloaded the Zip
     * file artifact, you have one of three ways to import it into an assistant's draft environment. These are as follows.
     * <br /><ol><li>Import the zip package in Tooling via <var>"Assistant Settings" -> "Download/Upload files" ->
     * "Upload" -> "Assistant only"</var>.</li><li>Import the zip package via "Create release import" endpoint using the
     * APIs.</li><li>Extract the contents of the Zip file artifact and individually import the skill JSONs via skill
     * update endpoints.</li></ol>.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.release - Unique identifier of the release.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<NodeJS.ReadableStream>>}
     */
    AssistantV2.prototype.downloadReleaseExportAsStream = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'release'];
        var _validParams = ['assistantId', 'release', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'release': _params.release,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'downloadReleaseExportAsStream');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/releases/{release}/export',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/octet-stream',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create release import.
     *
     * Import a previously exported assistant release Zip file artifact (/package) into an assistant. This endpoint
     * creates (/initiates) an asynchronous task (/job) in the background which will import the artifact contents into the
     * draft environment of the assistant on which this endpoint is called. Specifically, the asynchronous operation will
     * override the action and/or dialog skills in the assistant. It will be worth noting that when the artifact that is
     * provided to this endpoint is from an assistant release which has coexistence enabled (i.e., it has both action and
     * dialog skills), the import process will automatically enable coexistence, if not already enabled, on the assistant
     * into which said artifact is being uploaded to. On the other hand, if the artifact package being imported only has
     * action skill in it, the import asynchronous process will only override the draft environment's action skill,
     * regardless of whether coexistence is enabled on the assistant into which the package is being imported. Lastly, the
     * system will only run one asynchronous import at a time on an assistant. As such, consecutive imports will override
     * previous import's updates to the skills in the draft environment. Once created, you may poll the completion of the
     * import via the "Get release import Status" endpoint.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {NodeJS.ReadableStream | Buffer} params.body - Request body is an Octet-stream of the artifact Zip file that
     * is being imported.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.CreateAssistantReleaseImportResponse>>}
     */
    AssistantV2.prototype.createReleaseImport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'body'];
        var _validParams = ['assistantId', 'body', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = _params.body;
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createReleaseImport');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/import',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/octet-stream',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get release import Status.
     *
     * Monitor the status of an assistant release import. You may poll this endpoint until the status of the import has
     * either succeeded or failed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.MonitorAssistantReleaseImportArtifactResponse>>}
     */
    AssistantV2.prototype.getReleaseImportStatus = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'getReleaseImportStatus');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/import',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * skills
     ************************/
    /**
     * Get skill.
     *
     * Get information about a skill.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.skillId - Unique identifier of the skill. To find the skill ID in the watsonx Assistant user
     * interface, open the skill settings and click **API Details**.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Skill>>}
     */
    AssistantV2.prototype.getSkill = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'skillId'];
        var _validParams = ['assistantId', 'skillId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'skill_id': _params.skillId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'getSkill');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/skills/{skill_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update skill.
     *
     * Update a skill with new or modified data.
     *
     *   **Note:** The update is performed asynchronously; you can see the status of the update by calling the **Get
     * skill** method and checking the value of the **status** property.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {string} params.skillId - Unique identifier of the skill. To find the skill ID in the watsonx Assistant user
     * interface, open the skill settings and click **API Details**.
     * @param {string} [params.name] - The name of the skill. This string cannot contain carriage return, newline, or tab
     * characters.
     * @param {string} [params.description] - The description of the skill. This string cannot contain carriage return,
     * newline, or tab characters.
     * @param {JsonObject} [params.workspace] - An object containing the conversational content of an action or dialog
     * skill.
     * @param {JsonObject} [params.dialogSettings] - For internal use only.
     * @param {SearchSettings} [params.searchSettings] - An object describing the search skill configuration.
     *
     * **Note:** Search settings are not supported in **Import skills** requests, and are not included in **Export
     * skills** responses.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.Skill>>}
     */
    AssistantV2.prototype.updateSkill = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'skillId'];
        var _validParams = ['assistantId', 'skillId', 'name', 'description', 'workspace', 'dialogSettings', 'searchSettings', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'workspace': _params.workspace,
            'dialog_settings': _params.dialogSettings,
            'search_settings': _params.searchSettings,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
            'skill_id': _params.skillId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'updateSkill');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/skills/{skill_id}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Export skills.
     *
     * Asynchronously export the action skill and dialog skill (if enabled) for the assistant. Use this method to save all
     * skill data so that you can import it to a different assistant using the **Import skills** method.
     *
     *  A successful call to this method only initiates an asynchronous export. The exported JSON data is not available
     * until processing completes.
     *
     *  After the initial request is submitted, you can poll the status of the operation by calling the same request again
     * and checking the value of the **status** property. If an error occurs (indicated by a **status** value of
     * `Failed`), the `status_description` property provides more information about the error, and the `status_errors`
     * property contains an array of error messages that caused the failure.
     *
     *  When processing has completed, the request returns the exported JSON data. Remember that the usual rate limits
     * apply.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.SkillsExport>>}
     */
    AssistantV2.prototype.exportSkills = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'exportSkills');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/skills_export',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Import skills.
     *
     * Asynchronously import skills into an existing assistant from a previously exported file.
     *
     *  The request body for this method should contain the response data that was received from a previous call to the
     * **Export skills** method, without modification.
     *
     *  A successful call to this method initiates an asynchronous import. The updated skills belonging to the assistant
     * are not available until processing completes. To check the status of the asynchronous import operation, use the
     * **Get status of skills import** method.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {SkillImport[]} params.assistantSkills - An array of objects describing the skills for the assistant.
     * Included in responses only if **status**=`Available`.
     * @param {AssistantState} params.assistantState - Status information about the skills for the assistant. Included in
     * responses only if **status**=`Available`.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.SkillsAsyncRequestStatus>>}
     */
    AssistantV2.prototype.importSkills = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId', 'assistantSkills', 'assistantState'];
        var _validParams = ['assistantId', 'assistantSkills', 'assistantState', 'includeAudit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'assistant_skills': _params.assistantSkills,
            'assistant_state': _params.assistantState,
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'importSkills');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/skills_import',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get status of skills import.
     *
     * Retrieve the status of an asynchronous import operation previously initiated by using the **Import skills** method.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - The assistant ID or the environment ID of the environment where the assistant
     * is deployed, depending on the type of request:
     *  - For message, session, and log requests, specify the environment ID of the environment where the assistant is
     * deployed.
     *  - For all other requests, specify the assistant ID of the assistant.
     *
     *  To find the environment ID or assistant ID in the watsonx Assistant user interface, open the assistant settings
     * and scroll to the **Environments** section.
     *
     * **Note:** If you are using the classic Watson Assistant experience, always use the assistant ID. To find the
     * assistant ID in the user interface, open the assistant settings and click API Details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV2.Response<AssistantV2.SkillsAsyncRequestStatus>>}
     */
    AssistantV2.prototype.importSkillsStatus = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assistantId'];
        var _validParams = ['assistantId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
        };
        var path = {
            'assistant_id': _params.assistantId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'importSkillsStatus');
        var parameters = {
            options: {
                url: '/v2/assistants/{assistant_id}/skills_import/status',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    AssistantV2.DEFAULT_SERVICE_URL = 'https://api.us-south.assistant.watson.cloud.ibm.com';
    AssistantV2.DEFAULT_SERVICE_NAME = 'conversation';
    return AssistantV2;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (AssistantV2) {
    /** Constants for the `listProviders` operation. */
    var ListProvidersConstants;
    (function (ListProvidersConstants) {
        /** The attribute by which returned conversational skill providers will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["NAME"] = "name";
            Sort["UPDATED"] = "updated";
        })(Sort = ListProvidersConstants.Sort || (ListProvidersConstants.Sort = {}));
    })(ListProvidersConstants = AssistantV2.ListProvidersConstants || (AssistantV2.ListProvidersConstants = {}));
    /** Constants for the `listAssistants` operation. */
    var ListAssistantsConstants;
    (function (ListAssistantsConstants) {
        /** The attribute by which returned assistants will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["NAME"] = "name";
            Sort["UPDATED"] = "updated";
        })(Sort = ListAssistantsConstants.Sort || (ListAssistantsConstants.Sort = {}));
    })(ListAssistantsConstants = AssistantV2.ListAssistantsConstants || (AssistantV2.ListAssistantsConstants = {}));
    /** Constants for the `listEnvironments` operation. */
    var ListEnvironmentsConstants;
    (function (ListEnvironmentsConstants) {
        /** The attribute by which returned environments will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["NAME"] = "name";
            Sort["UPDATED"] = "updated";
        })(Sort = ListEnvironmentsConstants.Sort || (ListEnvironmentsConstants.Sort = {}));
    })(ListEnvironmentsConstants = AssistantV2.ListEnvironmentsConstants || (AssistantV2.ListEnvironmentsConstants = {}));
    /** Constants for the `listReleases` operation. */
    var ListReleasesConstants;
    (function (ListReleasesConstants) {
        /** The attribute by which returned workspaces will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["NAME"] = "name";
            Sort["UPDATED"] = "updated";
        })(Sort = ListReleasesConstants.Sort || (ListReleasesConstants.Sort = {}));
    })(ListReleasesConstants = AssistantV2.ListReleasesConstants || (AssistantV2.ListReleasesConstants = {}));
    var AssistantSkill;
    (function (AssistantSkill) {
        var Constants;
        (function (Constants) {
            /** The type of the skill. */
            var Type;
            (function (Type) {
                Type["DIALOG"] = "dialog";
                Type["ACTION"] = "action";
                Type["SEARCH"] = "search";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = AssistantSkill.Constants || (AssistantSkill.Constants = {}));
    })(AssistantSkill = AssistantV2.AssistantSkill || (AssistantV2.AssistantSkill = {}));
    var CreateAssistantReleaseImportResponse;
    (function (CreateAssistantReleaseImportResponse) {
        var Constants;
        (function (Constants) {
            /** The current status of the artifact import process: - **Failed**: The asynchronous artifact import process has failed. - **Processing**: An asynchronous operation to import artifact is underway and not yet completed. */
            var Status;
            (function (Status) {
                Status["FAILED"] = "Failed";
                Status["PROCESSING"] = "Processing";
            })(Status = Constants.Status || (Constants.Status = {}));
            /** An array of skill types in the draft environment which will be overridden with skills from the artifact being imported. */
            var SkillImpactInDraft;
            (function (SkillImpactInDraft) {
                SkillImpactInDraft["ACTION"] = "action";
                SkillImpactInDraft["DIALOG"] = "dialog";
            })(SkillImpactInDraft = Constants.SkillImpactInDraft || (Constants.SkillImpactInDraft = {}));
        })(Constants = CreateAssistantReleaseImportResponse.Constants || (CreateAssistantReleaseImportResponse.Constants = {}));
    })(CreateAssistantReleaseImportResponse = AssistantV2.CreateAssistantReleaseImportResponse || (AssistantV2.CreateAssistantReleaseImportResponse = {}));
    var CreateReleaseExportWithStatusErrors;
    (function (CreateReleaseExportWithStatusErrors) {
        var Constants;
        (function (Constants) {
            /** The current status of the release export creation process: - **Available**: The release export package is available for download. - **Failed**: The asynchronous release export package creation process has failed. - **Processing**: An asynchronous operation to create the release export package is underway and not yet completed. */
            var Status;
            (function (Status) {
                Status["AVAILABLE"] = "Available";
                Status["FAILED"] = "Failed";
                Status["PROCESSING"] = "Processing";
            })(Status = Constants.Status || (Constants.Status = {}));
        })(Constants = CreateReleaseExportWithStatusErrors.Constants || (CreateReleaseExportWithStatusErrors.Constants = {}));
    })(CreateReleaseExportWithStatusErrors = AssistantV2.CreateReleaseExportWithStatusErrors || (AssistantV2.CreateReleaseExportWithStatusErrors = {}));
    var DialogLogMessage;
    (function (DialogLogMessage) {
        var Constants;
        (function (Constants) {
            /** The severity of the log message. */
            var Level;
            (function (Level) {
                Level["INFO"] = "info";
                Level["ERROR"] = "error";
                Level["WARN"] = "warn";
            })(Level = Constants.Level || (Constants.Level = {}));
        })(Constants = DialogLogMessage.Constants || (DialogLogMessage.Constants = {}));
    })(DialogLogMessage = AssistantV2.DialogLogMessage || (AssistantV2.DialogLogMessage = {}));
    var DialogNodeAction;
    (function (DialogNodeAction) {
        var Constants;
        (function (Constants) {
            /** The type of action to invoke. */
            var Type;
            (function (Type) {
                Type["CLIENT"] = "client";
                Type["SERVER"] = "server";
                Type["WEB_ACTION"] = "web-action";
                Type["CLOUD_FUNCTION"] = "cloud-function";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = DialogNodeAction.Constants || (DialogNodeAction.Constants = {}));
    })(DialogNodeAction = AssistantV2.DialogNodeAction || (AssistantV2.DialogNodeAction = {}));
    var EnvironmentReference;
    (function (EnvironmentReference) {
        var Constants;
        (function (Constants) {
            /** The type of the environment. All environments other than the draft and live environments have the type `staging`. */
            var Environment;
            (function (Environment) {
                Environment["DRAFT"] = "draft";
                Environment["LIVE"] = "live";
                Environment["STAGING"] = "staging";
            })(Environment = Constants.Environment || (Constants.Environment = {}));
        })(Constants = EnvironmentReference.Constants || (EnvironmentReference.Constants = {}));
    })(EnvironmentReference = AssistantV2.EnvironmentReference || (AssistantV2.EnvironmentReference = {}));
    var EnvironmentSkill;
    (function (EnvironmentSkill) {
        var Constants;
        (function (Constants) {
            /** The type of the skill. */
            var Type;
            (function (Type) {
                Type["DIALOG"] = "dialog";
                Type["ACTION"] = "action";
                Type["SEARCH"] = "search";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = EnvironmentSkill.Constants || (EnvironmentSkill.Constants = {}));
    })(EnvironmentSkill = AssistantV2.EnvironmentSkill || (AssistantV2.EnvironmentSkill = {}));
    var LogRequestInput;
    (function (LogRequestInput) {
        var Constants;
        (function (Constants) {
            /** The type of the message: - `text`: The user input is processed normally by the assistant. - `search`: Only search results are returned. (Any dialog or action skill is bypassed.) **Note:** A `search` message results in an error if no search skill is configured for the assistant. */
            var MessageType;
            (function (MessageType) {
                MessageType["TEXT"] = "text";
                MessageType["SEARCH"] = "search";
            })(MessageType = Constants.MessageType || (Constants.MessageType = {}));
        })(Constants = LogRequestInput.Constants || (LogRequestInput.Constants = {}));
    })(LogRequestInput = AssistantV2.LogRequestInput || (AssistantV2.LogRequestInput = {}));
    var MessageContextGlobalSystem;
    (function (MessageContextGlobalSystem) {
        var Constants;
        (function (Constants) {
            /** The language code for localization in the user input. The specified locale overrides the default for the assistant, and is used for interpreting entity values in user input such as date values. For example, `04/03/2018` might be interpreted either as April 3 or March 4, depending on the locale. This property is included only if the new system entities are enabled for the skill. */
            var Locale;
            (function (Locale) {
                Locale["EN_US"] = "en-us";
                Locale["EN_CA"] = "en-ca";
                Locale["EN_GB"] = "en-gb";
                Locale["AR_AR"] = "ar-ar";
                Locale["CS_CZ"] = "cs-cz";
                Locale["DE_DE"] = "de-de";
                Locale["ES_ES"] = "es-es";
                Locale["FR_FR"] = "fr-fr";
                Locale["IT_IT"] = "it-it";
                Locale["JA_JP"] = "ja-jp";
                Locale["KO_KR"] = "ko-kr";
                Locale["NL_NL"] = "nl-nl";
                Locale["PT_BR"] = "pt-br";
                Locale["ZH_CN"] = "zh-cn";
                Locale["ZH_TW"] = "zh-tw";
            })(Locale = Constants.Locale || (Constants.Locale = {}));
        })(Constants = MessageContextGlobalSystem.Constants || (MessageContextGlobalSystem.Constants = {}));
    })(MessageContextGlobalSystem = AssistantV2.MessageContextGlobalSystem || (AssistantV2.MessageContextGlobalSystem = {}));
    var MessageInput;
    (function (MessageInput) {
        var Constants;
        (function (Constants) {
            /** The type of the message: - `text`: The user input is processed normally by the assistant. - `search`: Only search results are returned. (Any dialog or action skill is bypassed.) **Note:** A `search` message results in an error if no search skill is configured for the assistant. */
            var MessageType;
            (function (MessageType) {
                MessageType["TEXT"] = "text";
                MessageType["SEARCH"] = "search";
            })(MessageType = Constants.MessageType || (Constants.MessageType = {}));
        })(Constants = MessageInput.Constants || (MessageInput.Constants = {}));
    })(MessageInput = AssistantV2.MessageInput || (AssistantV2.MessageInput = {}));
    var MessageOutputDebug;
    (function (MessageOutputDebug) {
        var Constants;
        (function (Constants) {
            /** When `branch_exited` is set to `true` by the assistant, the `branch_exited_reason` specifies whether the dialog completed by itself or got interrupted. */
            var BranchExitedReason;
            (function (BranchExitedReason) {
                BranchExitedReason["COMPLETED"] = "completed";
                BranchExitedReason["FALLBACK"] = "fallback";
            })(BranchExitedReason = Constants.BranchExitedReason || (Constants.BranchExitedReason = {}));
        })(Constants = MessageOutputDebug.Constants || (MessageOutputDebug.Constants = {}));
    })(MessageOutputDebug = AssistantV2.MessageOutputDebug || (AssistantV2.MessageOutputDebug = {}));
    var MonitorAssistantReleaseImportArtifactResponse;
    (function (MonitorAssistantReleaseImportArtifactResponse) {
        var Constants;
        (function (Constants) {
            /** The current status of the release import process: - **Completed**: The artifact import has completed. - **Failed**: The asynchronous artifact import process has failed. - **Processing**: An asynchronous operation to import the artifact is underway and not yet completed. */
            var Status;
            (function (Status) {
                Status["COMPLETED"] = "Completed";
                Status["FAILED"] = "Failed";
                Status["PROCESSING"] = "Processing";
            })(Status = Constants.Status || (Constants.Status = {}));
            /** An array of skill types in the draft environment which will be overridden with skills from the artifact being imported. */
            var SkillImpactInDraft;
            (function (SkillImpactInDraft) {
                SkillImpactInDraft["ACTION"] = "action";
                SkillImpactInDraft["DIALOG"] = "dialog";
            })(SkillImpactInDraft = Constants.SkillImpactInDraft || (Constants.SkillImpactInDraft = {}));
        })(Constants = MonitorAssistantReleaseImportArtifactResponse.Constants || (MonitorAssistantReleaseImportArtifactResponse.Constants = {}));
    })(MonitorAssistantReleaseImportArtifactResponse = AssistantV2.MonitorAssistantReleaseImportArtifactResponse || (AssistantV2.MonitorAssistantReleaseImportArtifactResponse = {}));
    var ProviderAuthenticationOAuth2;
    (function (ProviderAuthenticationOAuth2) {
        var Constants;
        (function (Constants) {
            /** The preferred "flow" or "grant type" for the API client to fetch an access token from the authorization server. */
            var PreferredFlow;
            (function (PreferredFlow) {
                PreferredFlow["PASSWORD"] = "password";
                PreferredFlow["CLIENT_CREDENTIALS"] = "client_credentials";
                PreferredFlow["AUTHORIZATION_CODE"] = "authorization_code";
                PreferredFlow["CUSTOM_FLOW_NAME"] = "<$custom_flow_name>";
            })(PreferredFlow = Constants.PreferredFlow || (Constants.PreferredFlow = {}));
        })(Constants = ProviderAuthenticationOAuth2.Constants || (ProviderAuthenticationOAuth2.Constants = {}));
    })(ProviderAuthenticationOAuth2 = AssistantV2.ProviderAuthenticationOAuth2 || (AssistantV2.ProviderAuthenticationOAuth2 = {}));
    var ProviderAuthenticationOAuth2PasswordUsername;
    (function (ProviderAuthenticationOAuth2PasswordUsername) {
        var Constants;
        (function (Constants) {
            /** The type of property observed in "value". */
            var Type;
            (function (Type) {
                Type["VALUE"] = "value";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ProviderAuthenticationOAuth2PasswordUsername.Constants || (ProviderAuthenticationOAuth2PasswordUsername.Constants = {}));
    })(ProviderAuthenticationOAuth2PasswordUsername = AssistantV2.ProviderAuthenticationOAuth2PasswordUsername || (AssistantV2.ProviderAuthenticationOAuth2PasswordUsername = {}));
    var ProviderAuthenticationTypeAndValue;
    (function (ProviderAuthenticationTypeAndValue) {
        var Constants;
        (function (Constants) {
            /** The type of property observed in "value". */
            var Type;
            (function (Type) {
                Type["VALUE"] = "value";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ProviderAuthenticationTypeAndValue.Constants || (ProviderAuthenticationTypeAndValue.Constants = {}));
    })(ProviderAuthenticationTypeAndValue = AssistantV2.ProviderAuthenticationTypeAndValue || (AssistantV2.ProviderAuthenticationTypeAndValue = {}));
    var ProviderPrivateAuthenticationOAuth2PasswordPassword;
    (function (ProviderPrivateAuthenticationOAuth2PasswordPassword) {
        var Constants;
        (function (Constants) {
            /** The type of property observed in "value". */
            var Type;
            (function (Type) {
                Type["VALUE"] = "value";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ProviderPrivateAuthenticationOAuth2PasswordPassword.Constants || (ProviderPrivateAuthenticationOAuth2PasswordPassword.Constants = {}));
    })(ProviderPrivateAuthenticationOAuth2PasswordPassword = AssistantV2.ProviderPrivateAuthenticationOAuth2PasswordPassword || (AssistantV2.ProviderPrivateAuthenticationOAuth2PasswordPassword = {}));
    var ProviderResponseSpecificationComponentsSecuritySchemes;
    (function (ProviderResponseSpecificationComponentsSecuritySchemes) {
        var Constants;
        (function (Constants) {
            /** The authentication method required for requests made from watsonx Assistant to the conversational skill provider. */
            var AuthenticationMethod;
            (function (AuthenticationMethod) {
                AuthenticationMethod["BASIC"] = "basic";
                AuthenticationMethod["BEARER"] = "bearer";
                AuthenticationMethod["API_KEY"] = "api_key";
                AuthenticationMethod["OAUTH2"] = "oauth2";
                AuthenticationMethod["NONE"] = "none";
            })(AuthenticationMethod = Constants.AuthenticationMethod || (Constants.AuthenticationMethod = {}));
        })(Constants = ProviderResponseSpecificationComponentsSecuritySchemes.Constants || (ProviderResponseSpecificationComponentsSecuritySchemes.Constants = {}));
    })(ProviderResponseSpecificationComponentsSecuritySchemes = AssistantV2.ProviderResponseSpecificationComponentsSecuritySchemes || (AssistantV2.ProviderResponseSpecificationComponentsSecuritySchemes = {}));
    var ProviderSpecificationComponentsSecuritySchemes;
    (function (ProviderSpecificationComponentsSecuritySchemes) {
        var Constants;
        (function (Constants) {
            /** The authentication method required for requests made from watsonx Assistant to the conversational skill provider. */
            var AuthenticationMethod;
            (function (AuthenticationMethod) {
                AuthenticationMethod["BASIC"] = "basic";
                AuthenticationMethod["BEARER"] = "bearer";
                AuthenticationMethod["API_KEY"] = "api_key";
                AuthenticationMethod["OAUTH2"] = "oauth2";
                AuthenticationMethod["NONE"] = "none";
            })(AuthenticationMethod = Constants.AuthenticationMethod || (Constants.AuthenticationMethod = {}));
        })(Constants = ProviderSpecificationComponentsSecuritySchemes.Constants || (ProviderSpecificationComponentsSecuritySchemes.Constants = {}));
    })(ProviderSpecificationComponentsSecuritySchemes = AssistantV2.ProviderSpecificationComponentsSecuritySchemes || (AssistantV2.ProviderSpecificationComponentsSecuritySchemes = {}));
    var Release;
    (function (Release) {
        var Constants;
        (function (Constants) {
            /** The current status of the release: - **Available**: The release is available for deployment. - **Failed**: An asynchronous publish operation has failed. - **Processing**: An asynchronous publish operation has not yet completed. */
            var Status;
            (function (Status) {
                Status["AVAILABLE"] = "Available";
                Status["FAILED"] = "Failed";
                Status["PROCESSING"] = "Processing";
            })(Status = Constants.Status || (Constants.Status = {}));
        })(Constants = Release.Constants || (Release.Constants = {}));
    })(Release = AssistantV2.Release || (AssistantV2.Release = {}));
    var ReleaseSkill;
    (function (ReleaseSkill) {
        var Constants;
        (function (Constants) {
            /** The type of the skill. */
            var Type;
            (function (Type) {
                Type["DIALOG"] = "dialog";
                Type["ACTION"] = "action";
                Type["SEARCH"] = "search";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ReleaseSkill.Constants || (ReleaseSkill.Constants = {}));
    })(ReleaseSkill = AssistantV2.ReleaseSkill || (AssistantV2.ReleaseSkill = {}));
    var RuntimeEntityInterpretation;
    (function (RuntimeEntityInterpretation) {
        var Constants;
        (function (Constants) {
            /** The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity. */
            var Granularity;
            (function (Granularity) {
                Granularity["DAY"] = "day";
                Granularity["FORTNIGHT"] = "fortnight";
                Granularity["HOUR"] = "hour";
                Granularity["INSTANT"] = "instant";
                Granularity["MINUTE"] = "minute";
                Granularity["MONTH"] = "month";
                Granularity["QUARTER"] = "quarter";
                Granularity["SECOND"] = "second";
                Granularity["WEEK"] = "week";
                Granularity["WEEKEND"] = "weekend";
                Granularity["YEAR"] = "year";
            })(Granularity = Constants.Granularity || (Constants.Granularity = {}));
        })(Constants = RuntimeEntityInterpretation.Constants || (RuntimeEntityInterpretation.Constants = {}));
    })(RuntimeEntityInterpretation = AssistantV2.RuntimeEntityInterpretation || (AssistantV2.RuntimeEntityInterpretation = {}));
    var RuntimeEntityRole;
    (function (RuntimeEntityRole) {
        var Constants;
        (function (Constants) {
            /** The relationship of the entity to the range. */
            var Type;
            (function (Type) {
                Type["DATE_FROM"] = "date_from";
                Type["DATE_TO"] = "date_to";
                Type["NUMBER_FROM"] = "number_from";
                Type["NUMBER_TO"] = "number_to";
                Type["TIME_FROM"] = "time_from";
                Type["TIME_TO"] = "time_to";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = RuntimeEntityRole.Constants || (RuntimeEntityRole.Constants = {}));
    })(RuntimeEntityRole = AssistantV2.RuntimeEntityRole || (AssistantV2.RuntimeEntityRole = {}));
    var SearchSettingsConversationalSearchResponseLength;
    (function (SearchSettingsConversationalSearchResponseLength) {
        var Constants;
        (function (Constants) {
            /** The response length option. It controls the length of the generated response. */
            var Option;
            (function (Option) {
                Option["CONCISE"] = "concise";
                Option["MODERATE"] = "moderate";
                Option["VERBOSE"] = "verbose";
            })(Option = Constants.Option || (Constants.Option = {}));
        })(Constants = SearchSettingsConversationalSearchResponseLength.Constants || (SearchSettingsConversationalSearchResponseLength.Constants = {}));
    })(SearchSettingsConversationalSearchResponseLength = AssistantV2.SearchSettingsConversationalSearchResponseLength || (AssistantV2.SearchSettingsConversationalSearchResponseLength = {}));
    var SearchSettingsConversationalSearchSearchConfidence;
    (function (SearchSettingsConversationalSearchSearchConfidence) {
        var Constants;
        (function (Constants) {
            /** The search confidence threshold. It controls the tendency for conversational search to produce “I don't know” answers. */
            var Threshold;
            (function (Threshold) {
                Threshold["RARELY"] = "rarely";
                Threshold["LESS_OFTEN"] = "less_often";
                Threshold["MORE_OFTEN"] = "more_often";
                Threshold["MOST_OFTEN"] = "most_often";
            })(Threshold = Constants.Threshold || (Constants.Threshold = {}));
        })(Constants = SearchSettingsConversationalSearchSearchConfidence.Constants || (SearchSettingsConversationalSearchSearchConfidence.Constants = {}));
    })(SearchSettingsConversationalSearchSearchConfidence = AssistantV2.SearchSettingsConversationalSearchSearchConfidence || (AssistantV2.SearchSettingsConversationalSearchSearchConfidence = {}));
    var SearchSettingsServerSideSearch;
    (function (SearchSettingsServerSideSearch) {
        var Constants;
        (function (Constants) {
            /** The authorization type that is used. */
            var AuthType;
            (function (AuthType) {
                AuthType["BASIC"] = "basic";
                AuthType["APIKEY"] = "apikey";
                AuthType["NONE"] = "none";
            })(AuthType = Constants.AuthType || (Constants.AuthType = {}));
        })(Constants = SearchSettingsServerSideSearch.Constants || (SearchSettingsServerSideSearch.Constants = {}));
    })(SearchSettingsServerSideSearch = AssistantV2.SearchSettingsServerSideSearch || (AssistantV2.SearchSettingsServerSideSearch = {}));
    var Skill;
    (function (Skill) {
        var Constants;
        (function (Constants) {
            /** The current status of the skill: - **Available**: The skill is available and ready to process messages. - **Failed**: An asynchronous operation has failed. See the **status_errors** property for more information about the cause of the failure. - **Non Existent**: The skill does not exist. - **Processing**: An asynchronous operation has not yet completed. - **Training**: The skill is training based on new data. */
            var Status;
            (function (Status) {
                Status["AVAILABLE"] = "Available";
                Status["FAILED"] = "Failed";
                Status["NON_EXISTENT"] = "Non Existent";
                Status["PROCESSING"] = "Processing";
                Status["TRAINING"] = "Training";
                Status["UNAVAILABLE"] = "Unavailable";
            })(Status = Constants.Status || (Constants.Status = {}));
            /** The type of skill. */
            var Type;
            (function (Type) {
                Type["ACTION"] = "action";
                Type["DIALOG"] = "dialog";
                Type["SEARCH"] = "search";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = Skill.Constants || (Skill.Constants = {}));
    })(Skill = AssistantV2.Skill || (AssistantV2.Skill = {}));
    var SkillImport;
    (function (SkillImport) {
        var Constants;
        (function (Constants) {
            /** The current status of the skill: - **Available**: The skill is available and ready to process messages. - **Failed**: An asynchronous operation has failed. See the **status_errors** property for more information about the cause of the failure. - **Non Existent**: The skill does not exist. - **Processing**: An asynchronous operation has not yet completed. - **Training**: The skill is training based on new data. */
            var Status;
            (function (Status) {
                Status["AVAILABLE"] = "Available";
                Status["FAILED"] = "Failed";
                Status["NON_EXISTENT"] = "Non Existent";
                Status["PROCESSING"] = "Processing";
                Status["TRAINING"] = "Training";
                Status["UNAVAILABLE"] = "Unavailable";
            })(Status = Constants.Status || (Constants.Status = {}));
            /** The type of skill. */
            var Type;
            (function (Type) {
                Type["ACTION"] = "action";
                Type["DIALOG"] = "dialog";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = SkillImport.Constants || (SkillImport.Constants = {}));
    })(SkillImport = AssistantV2.SkillImport || (AssistantV2.SkillImport = {}));
    var SkillsAsyncRequestStatus;
    (function (SkillsAsyncRequestStatus) {
        var Constants;
        (function (Constants) {
            /** The current status of the asynchronous operation: - `Available`: An asynchronous export is available. - `Completed`: An asynchronous import operation has completed successfully. - `Failed`: An asynchronous operation has failed. See the **status_errors** property for more information about the cause of the failure. - `Processing`: An asynchronous operation has not yet completed. */
            var Status;
            (function (Status) {
                Status["AVAILABLE"] = "Available";
                Status["COMPLETED"] = "Completed";
                Status["FAILED"] = "Failed";
                Status["PROCESSING"] = "Processing";
            })(Status = Constants.Status || (Constants.Status = {}));
        })(Constants = SkillsAsyncRequestStatus.Constants || (SkillsAsyncRequestStatus.Constants = {}));
    })(SkillsAsyncRequestStatus = AssistantV2.SkillsAsyncRequestStatus || (AssistantV2.SkillsAsyncRequestStatus = {}));
    var StatelessMessageInput;
    (function (StatelessMessageInput) {
        var Constants;
        (function (Constants) {
            /** The type of the message: - `text`: The user input is processed normally by the assistant. - `search`: Only search results are returned. (Any dialog or action skill is bypassed.) **Note:** A `search` message results in an error if no search skill is configured for the assistant. */
            var MessageType;
            (function (MessageType) {
                MessageType["TEXT"] = "text";
                MessageType["SEARCH"] = "search";
            })(MessageType = Constants.MessageType || (Constants.MessageType = {}));
        })(Constants = StatelessMessageInput.Constants || (StatelessMessageInput.Constants = {}));
    })(StatelessMessageInput = AssistantV2.StatelessMessageInput || (AssistantV2.StatelessMessageInput = {}));
    var TurnEventActionSource;
    (function (TurnEventActionSource) {
        var Constants;
        (function (Constants) {
            /** The type of turn event. */
            var Type;
            (function (Type) {
                Type["ACTION"] = "action";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = TurnEventActionSource.Constants || (TurnEventActionSource.Constants = {}));
    })(TurnEventActionSource = AssistantV2.TurnEventActionSource || (AssistantV2.TurnEventActionSource = {}));
    var TurnEventCalloutCallout;
    (function (TurnEventCalloutCallout) {
        var Constants;
        (function (Constants) {
            /** The type of callout. Currently, the only supported value is `integration_interaction` (for calls to extensions). */
            var Type;
            (function (Type) {
                Type["INTEGRATION_INTERACTION"] = "integration_interaction";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = TurnEventCalloutCallout.Constants || (TurnEventCalloutCallout.Constants = {}));
    })(TurnEventCalloutCallout = AssistantV2.TurnEventCalloutCallout || (AssistantV2.TurnEventCalloutCallout = {}));
    var TurnEventCalloutCalloutRequest;
    (function (TurnEventCalloutCalloutRequest) {
        var Constants;
        (function (Constants) {
            /** The REST method of the request. */
            var Method;
            (function (Method) {
                Method["GET"] = "get";
                Method["POST"] = "post";
                Method["PUT"] = "put";
                Method["DELETE"] = "delete";
                Method["PATCH"] = "patch";
            })(Method = Constants.Method || (Constants.Method = {}));
        })(Constants = TurnEventCalloutCalloutRequest.Constants || (TurnEventCalloutCalloutRequest.Constants = {}));
    })(TurnEventCalloutCalloutRequest = AssistantV2.TurnEventCalloutCalloutRequest || (AssistantV2.TurnEventCalloutCalloutRequest = {}));
    var TurnEventNodeSource;
    (function (TurnEventNodeSource) {
        var Constants;
        (function (Constants) {
            /** The type of turn event. */
            var Type;
            (function (Type) {
                Type["DIALOG_NODE"] = "dialog_node";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = TurnEventNodeSource.Constants || (TurnEventNodeSource.Constants = {}));
    })(TurnEventNodeSource = AssistantV2.TurnEventNodeSource || (AssistantV2.TurnEventNodeSource = {}));
    var MessageOutputDebugTurnEventTurnEventActionFinished;
    (function (MessageOutputDebugTurnEventTurnEventActionFinished) {
        var Constants;
        (function (Constants) {
            /** The type of condition (if any) that is defined for the action. */
            var ConditionType;
            (function (ConditionType) {
                ConditionType["USER_DEFINED"] = "user_defined";
                ConditionType["WELCOME"] = "welcome";
                ConditionType["ANYTHING_ELSE"] = "anything_else";
            })(ConditionType = Constants.ConditionType || (Constants.ConditionType = {}));
            /** The reason the action finished processing. */
            var Reason;
            (function (Reason) {
                Reason["ALL_STEPS_DONE"] = "all_steps_done";
                Reason["NO_STEPS_VISITED"] = "no_steps_visited";
                Reason["ENDED_BY_STEP"] = "ended_by_step";
                Reason["CONNECT_TO_AGENT"] = "connect_to_agent";
                Reason["MAX_RETRIES_REACHED"] = "max_retries_reached";
                Reason["FALLBACK"] = "fallback";
            })(Reason = Constants.Reason || (Constants.Reason = {}));
        })(Constants = MessageOutputDebugTurnEventTurnEventActionFinished.Constants || (MessageOutputDebugTurnEventTurnEventActionFinished.Constants = {}));
    })(MessageOutputDebugTurnEventTurnEventActionFinished = AssistantV2.MessageOutputDebugTurnEventTurnEventActionFinished || (AssistantV2.MessageOutputDebugTurnEventTurnEventActionFinished = {}));
    var MessageOutputDebugTurnEventTurnEventActionVisited;
    (function (MessageOutputDebugTurnEventTurnEventActionVisited) {
        var Constants;
        (function (Constants) {
            /** The type of condition (if any) that is defined for the action. */
            var ConditionType;
            (function (ConditionType) {
                ConditionType["USER_DEFINED"] = "user_defined";
                ConditionType["WELCOME"] = "welcome";
                ConditionType["ANYTHING_ELSE"] = "anything_else";
            })(ConditionType = Constants.ConditionType || (Constants.ConditionType = {}));
            /** The reason the action was visited. */
            var Reason;
            (function (Reason) {
                Reason["INTENT"] = "intent";
                Reason["INVOKE_SUBACTION"] = "invoke_subaction";
                Reason["SUBACTION_RETURN"] = "subaction_return";
                Reason["INVOKE_EXTERNAL"] = "invoke_external";
                Reason["TOPIC_SWITCH"] = "topic_switch";
                Reason["TOPIC_RETURN"] = "topic_return";
                Reason["AGENT_REQUESTED"] = "agent_requested";
                Reason["STEP_VALIDATION_FAILED"] = "step_validation_failed";
                Reason["NO_ACTION_MATCHES"] = "no_action_matches";
            })(Reason = Constants.Reason || (Constants.Reason = {}));
        })(Constants = MessageOutputDebugTurnEventTurnEventActionVisited.Constants || (MessageOutputDebugTurnEventTurnEventActionVisited.Constants = {}));
    })(MessageOutputDebugTurnEventTurnEventActionVisited = AssistantV2.MessageOutputDebugTurnEventTurnEventActionVisited || (AssistantV2.MessageOutputDebugTurnEventTurnEventActionVisited = {}));
    var MessageOutputDebugTurnEventTurnEventNodeVisited;
    (function (MessageOutputDebugTurnEventTurnEventNodeVisited) {
        var Constants;
        (function (Constants) {
            /** The reason the dialog node was visited. */
            var Reason;
            (function (Reason) {
                Reason["WELCOME"] = "welcome";
                Reason["BRANCH_START"] = "branch_start";
                Reason["TOPIC_SWITCH"] = "topic_switch";
                Reason["TOPIC_RETURN"] = "topic_return";
                Reason["TOPIC_SWITCH_WITHOUT_RETURN"] = "topic_switch_without_return";
                Reason["JUMP"] = "jump";
            })(Reason = Constants.Reason || (Constants.Reason = {}));
        })(Constants = MessageOutputDebugTurnEventTurnEventNodeVisited.Constants || (MessageOutputDebugTurnEventTurnEventNodeVisited.Constants = {}));
    })(MessageOutputDebugTurnEventTurnEventNodeVisited = AssistantV2.MessageOutputDebugTurnEventTurnEventNodeVisited || (AssistantV2.MessageOutputDebugTurnEventTurnEventNodeVisited = {}));
    var MessageOutputDebugTurnEventTurnEventStepAnswered;
    (function (MessageOutputDebugTurnEventTurnEventStepAnswered) {
        var Constants;
        (function (Constants) {
            /** The type of condition (if any) that is defined for the action. */
            var ConditionType;
            (function (ConditionType) {
                ConditionType["USER_DEFINED"] = "user_defined";
                ConditionType["WELCOME"] = "welcome";
                ConditionType["ANYTHING_ELSE"] = "anything_else";
            })(ConditionType = Constants.ConditionType || (Constants.ConditionType = {}));
        })(Constants = MessageOutputDebugTurnEventTurnEventStepAnswered.Constants || (MessageOutputDebugTurnEventTurnEventStepAnswered.Constants = {}));
    })(MessageOutputDebugTurnEventTurnEventStepAnswered = AssistantV2.MessageOutputDebugTurnEventTurnEventStepAnswered || (AssistantV2.MessageOutputDebugTurnEventTurnEventStepAnswered = {}));
    var MessageOutputDebugTurnEventTurnEventStepVisited;
    (function (MessageOutputDebugTurnEventTurnEventStepVisited) {
        var Constants;
        (function (Constants) {
            /** The type of condition (if any) that is defined for the action. */
            var ConditionType;
            (function (ConditionType) {
                ConditionType["USER_DEFINED"] = "user_defined";
                ConditionType["WELCOME"] = "welcome";
                ConditionType["ANYTHING_ELSE"] = "anything_else";
            })(ConditionType = Constants.ConditionType || (Constants.ConditionType = {}));
        })(Constants = MessageOutputDebugTurnEventTurnEventStepVisited.Constants || (MessageOutputDebugTurnEventTurnEventStepVisited.Constants = {}));
    })(MessageOutputDebugTurnEventTurnEventStepVisited = AssistantV2.MessageOutputDebugTurnEventTurnEventStepVisited || (AssistantV2.MessageOutputDebugTurnEventTurnEventStepVisited = {}));
    var ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode;
    (function (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode) {
        var Constants;
        (function (Constants) {
            /** The client authorization type. */
            var ClientAuthType;
            (function (ClientAuthType) {
                ClientAuthType["BODY"] = "Body";
                ClientAuthType["BASICAUTHHEADER"] = "BasicAuthHeader";
            })(ClientAuthType = Constants.ClientAuthType || (Constants.ClientAuthType = {}));
        })(Constants = ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode.Constants || (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode.Constants = {}));
    })(ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode = AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode || (AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2AuthorizationCode = {}));
    var ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials;
    (function (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials) {
        var Constants;
        (function (Constants) {
            /** The client authorization type. */
            var ClientAuthType;
            (function (ClientAuthType) {
                ClientAuthType["BODY"] = "Body";
                ClientAuthType["BASICAUTHHEADER"] = "BasicAuthHeader";
            })(ClientAuthType = Constants.ClientAuthType || (Constants.ClientAuthType = {}));
        })(Constants = ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials.Constants || (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials.Constants = {}));
    })(ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials = AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials || (AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2ClientCredentials = {}));
    var ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password;
    (function (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password) {
        var Constants;
        (function (Constants) {
            /** The client authorization type. */
            var ClientAuthType;
            (function (ClientAuthType) {
                ClientAuthType["BODY"] = "Body";
                ClientAuthType["BASICAUTHHEADER"] = "BasicAuthHeader";
            })(ClientAuthType = Constants.ClientAuthType || (Constants.ClientAuthType = {}));
        })(Constants = ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password.Constants || (ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password.Constants = {}));
    })(ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password = AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password || (AssistantV2.ProviderAuthenticationOAuth2FlowsProviderAuthenticationOAuth2Password = {}));
    var RuntimeResponseGenericRuntimeResponseTypeOption;
    (function (RuntimeResponseGenericRuntimeResponseTypeOption) {
        var Constants;
        (function (Constants) {
            /** The preferred type of control to display. */
            var Preference;
            (function (Preference) {
                Preference["DROPDOWN"] = "dropdown";
                Preference["BUTTON"] = "button";
            })(Preference = Constants.Preference || (Constants.Preference = {}));
        })(Constants = RuntimeResponseGenericRuntimeResponseTypeOption.Constants || (RuntimeResponseGenericRuntimeResponseTypeOption.Constants = {}));
    })(RuntimeResponseGenericRuntimeResponseTypeOption = AssistantV2.RuntimeResponseGenericRuntimeResponseTypeOption || (AssistantV2.RuntimeResponseGenericRuntimeResponseTypeOption = {}));
})(AssistantV2 || (AssistantV2 = {}));
module.exports = AssistantV2;
